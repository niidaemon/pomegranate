services:
  # Infrastructure Services
  
  # Message Queue
  kafka:
    build: ./infra/kafka
    container_name: kafkatest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CLUSTER_ID=pome
      - KAFKA_LOG_DIRS=/tmp/kraft-combined-logs
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
    networks:
      - pomegranate-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Databases
  # Primary Postgres
  postgres-primary:
    image: postgres:18
    container_name: postgres-primary
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    command: >
      postgres
      -c max_connections=${POSTGRES_MAX_CONNECTIONS}
      -c shared_buffers=${POSTGRES_SHARED_BUFFERS}
      -c effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE}
      -c work_mem=${POSTGRES_WORK_MEM}
      -c maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM}
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./infra/postgres/postgres/primary/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./infra/postgres/postgres/primary/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./infra/postgres/postgres/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - pomegranate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Postgres Standby 1
  postgres-standby-1:
    image: postgres:18
    container_name: postgres-standby-1
    depends_on:
      - postgres-primary
    volumes:
      - postgres-standby-1-data:/var/lib/postgresql/data
      - ./infra/postgres/postgres/standby/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - pomegranate-network

  # Postgres Standby 2
  postgres-standby-2:
    image: postgres:18
    container_name: postgres-standby-2
    depends_on:
      - postgres-primary
    volumes:
      - postgres-standby-2-data:/var/lib/postgresql/data
      - ./infra/postgres/postgres/standby/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - pomegranate-network

  # Pgbouncer - connection pooling
  pgbouncer:
    image: bitnami/pgbouncer:latest
    container_name: pgbouncer
    depends_on:
      - haproxy
    volumes:
      - ./infra/postgres/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./infra/postgres/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    ports:
      - "6432:6432"
    networks:
      - pomegranate-network

  # Haproxy - load balancer
  haproxy:
    image: haproxy:3.2
    container_name: haproxy
    depends_on:
      - postgres-primary
      - postgres-standby-1
      - postgres-standby-2
    volumes:
      - ./infra/postgres/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "5433:5432"   # Primary routing frontend
      - "5434:5433"   # Replica routing frontend
      - "8404:8404"   # HAProxy stats dashboard
    networks:
      - pomegranate-network  

  # Postgres Exporter - monitoring
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/postgres?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres-primary
    networks:
      - pomegranate-network

  mongo:
    build: ./infra/mongo
    container_name: mongotest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=dev
      - MONGO_INITDB_ROOT_PASSWORD=pass
      - MONGO_INITDB_DATABASE=devdb
    volumes:
      - mongo-data:/data/db
    networks:
      - pomegranate-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    build: ./infra/redis
    container_name: redistest
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - pomegranate-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Reverse Proxy / Load Balancer
  traefik:
    build: ./infra/traefik
    container_name: traefik-dev
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/certs
    networks:
      - pomegranate-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Monitoring
  prometheus:
    build: ./infra/monitoring/prometheus
    container_name: prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./infra/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - pomegranate-network

  grafana:
    build: ./infra/monitoring/grafana
    container_name: grafana-dev
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - pomegranate-network
    depends_on:
      - prometheus

  # Backend Services
  
  # Python Services (FastAPI)
  deliveries:
    build: ./services/deliveries
    container_name: deliveries-dev
    ports:
      - "8001:8001"
    environment:
      - MONGODB_URL=mongodb://dev:pass@mongo:27017/devdb?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
    networks:
      - pomegranate-network
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.deliveries.rule=PathPrefix(`/api/deliveries`)"
      - "traefik.http.services.deliveries.loadbalancer.server.port=8001"

  analytics:
    build: ./services/analytics
    container_name: analytics-dev
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://dev:pass@postgres:5432/devdb
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
    networks:
      - pomegranate-network
    depends_on:
      pgbouncer:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.analytics.rule=PathPrefix(`/api/analytics`)"
      - "traefik.http.services.analytics.loadbalancer.server.port=8002"

  payments:
    build: ./services/payments
    container_name: payment-dev
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://dev:pass@postgres:5432/devdb
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
    networks:
      - pomegranate-network
    depends_on:
      pgbouncer:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payments.rule=PathPrefix(`/api/payments`)"
      - "traefik.http.services.payments.loadbalancer.server.port=8005"

  # Go Services
  inventory:
    build: ./services/inventory
    container_name: inventory-dev
    ports:
      - "8004:8004"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=dev
      - DB_PASSWORD=pass
      - DB_NAME=devdb
      - KAFKA_BROKERS=kafka:9092
      - REDIS_ADDR=redis:6379
    networks:
      - pomegranate-network
    depends_on:
      pgbouncer:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inventory.rule=PathPrefix(`/api/inventory`)"
      - "traefik.http.services.inventory.loadbalancer.server.port=8004"

  catalog:
    build: ./services/catalog
    container_name: catalog-dev
    ports:
      - "8006:8006"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=dev
      - DB_PASSWORD=pass
      - DB_NAME=devdb
      - KAFKA_BROKERS=kafka:9092
      - REDIS_ADDR=redis:6379
    networks:
      - pomegranate-network
    depends_on:
      pgbouncer:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.catalog.rule=PathPrefix(`/api/catalog`)"
      - "traefik.http.services.catalog.loadbalancer.server.port=8006"

  # Java Services (Spring Boot)
  orders:
    build: ./services/orders
    container_name: orders-dev
    ports:
      - "8007:8007"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/devdb
      - SPRING_DATASOURCE_USERNAME=dev
      - SPRING_DATASOURCE_PASSWORD=pass
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    networks:
      - pomegranate-network
    depends_on:
      pgbouncer:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.orders.rule=PathPrefix(`/api/orders`)"
      - "traefik.http.services.orders.loadbalancer.server.port=8007"

  auth:
    build: ./services/auth
    container_name: auth-dev
    ports:
      - "8008:8008"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/devdb
      - SPRING_DATASOURCE_USERNAME=dev
      - SPRING_DATASOURCE_PASSWORD=pass
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    networks:
      - pomegranate-network
    depends_on:
      pgbouncer:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.services.auth.loadbalancer.server.port=8008"

  # Node.js Services (Express)
  cart:
    build: ./services/carts
    container_name: carts-dev
    ports:
      - "8009:8009"
    environment:
      - DATABASE_URL=postgresql://dev:pass@postgres:5432/devdb
      - KAFKA_BROKERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - pomegranate-network
    depends_on:
      pgbouncer:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cart.rule=PathPrefix(`/api/cart`)"
      - "traefik.http.services.cart.loadbalancer.server.port=8009"

  notifications:
    build: ./services/notifications
    container_name: notifications-dev
    ports:
      - "8010:8010"
    environment:
      - MONGODB_URL=mongodb://dev:pass@mongo:27017/devdb?authSource=admin
      - KAFKA_BROKERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - pomegranate-network
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notifications.rule=PathPrefix(`/api/notifications`)"
      - "traefik.http.services.notifications.loadbalancer.server.port=8010"

  # Frontend Client
  web:
    build: ./clients/web
    container_name: client-web
    ports:
      - "3005:80"  
    environment:
      - VITE_API_BASE_URL=http://localhost
    networks:
      - pomegranate-network
    depends_on:
      - traefik
      - auth
      - catalog
      - cart
      - orders
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`localhost`)"
      - "traefik.http.services.web.loadbalancer.server.port=80"

networks:
  pomegranate-network:
    driver: bridge
    name: pomegranate-network

volumes:
  postgres-primary-data:
  postgres-standby-1-data:
  postgres-standby-2-data:
  mongo-data:
  redis-data:
  prometheus-data:
  grafana-data:
  traefik-certs: